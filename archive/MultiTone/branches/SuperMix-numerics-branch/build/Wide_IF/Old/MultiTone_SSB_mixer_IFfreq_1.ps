%!PS-Adobe-2.0
%%Title: MultiTone_SSB_mixer_IFfreq_1.ps
%%Creator: gnuplot 3.8j patchlevel 0
%%CreationDate: Fri Feb 25 12:07:39 2005
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 554 697
%%Orientation: Landscape
%%Pages: (atend)
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -60 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {{dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse } forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
90 rotate
0 -5040 translate
0 setgray
newpath
(Helvetica) findfont 180 scalefont setfont
1.000 UL
LTb
1.000 UL
LTa
810 540 M
5364 0 V
1.000 UL
LTb
810 540 M
63 0 V
5301 0 R
-63 0 V
stroke
702 540 M
gsave 0 setgray
[ [(Helvetica) 180.0 0.0 true true 0 (-25)]
] -60.0 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
810 1054 M
5364 0 V
1.000 UL
LTb
810 1054 M
63 0 V
5301 0 R
-63 0 V
stroke
702 1054 M
gsave 0 setgray
[ [(Helvetica) 180.0 0.0 true true 0 (-20)]
] -60.0 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
810 1569 M
5364 0 V
1.000 UL
LTb
810 1569 M
63 0 V
5301 0 R
-63 0 V
stroke
702 1569 M
gsave 0 setgray
[ [(Helvetica) 180.0 0.0 true true 0 (-15)]
] -60.0 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
810 2083 M
5364 0 V
1.000 UL
LTb
810 2083 M
63 0 V
5301 0 R
-63 0 V
stroke
702 2083 M
gsave 0 setgray
[ [(Helvetica) 180.0 0.0 true true 0 (-10)]
] -60.0 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
810 2597 M
5364 0 V
1.000 UL
LTb
810 2597 M
63 0 V
5301 0 R
-63 0 V
stroke
702 2597 M
gsave 0 setgray
[ [(Helvetica) 180.0 0.0 true true 0 (-5)]
] -60.0 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
810 3111 M
5364 0 V
1.000 UL
LTb
810 3111 M
63 0 V
5301 0 R
-63 0 V
stroke
702 3111 M
gsave 0 setgray
[ [(Helvetica) 180.0 0.0 true true 0 ( 0)]
] -60.0 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
810 3626 M
5364 0 V
1.000 UL
LTb
810 3626 M
63 0 V
5301 0 R
-63 0 V
stroke
702 3626 M
gsave 0 setgray
[ [(Helvetica) 180.0 0.0 true true 0 ( 5)]
] -60.0 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
810 4140 M
5364 0 V
1.000 UL
LTb
810 4140 M
63 0 V
5301 0 R
-63 0 V
stroke
702 4140 M
gsave 0 setgray
[ [(Helvetica) 180.0 0.0 true true 0 ( 10)]
] -60.0 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
810 540 M
0 3600 V
1.000 UL
LTb
810 540 M
0 63 V
0 3537 R
0 -63 V
stroke
810 360 M
gsave 0 setgray
[ [(Helvetica) 180.0 0.0 true true 0 ( 0)]
] -60.0 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
1481 540 M
0 3600 V
1.000 UL
LTb
1481 540 M
0 63 V
0 3537 R
0 -63 V
stroke
1481 360 M
gsave 0 setgray
[ [(Helvetica) 180.0 0.0 true true 0 ( 25)]
] -60.0 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
2151 540 M
0 3600 V
1.000 UL
LTb
2151 540 M
0 63 V
0 3537 R
0 -63 V
stroke
2151 360 M
gsave 0 setgray
[ [(Helvetica) 180.0 0.0 true true 0 ( 50)]
] -60.0 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
2822 540 M
0 3600 V
1.000 UL
LTb
2822 540 M
0 63 V
0 3537 R
0 -63 V
stroke
2822 360 M
gsave 0 setgray
[ [(Helvetica) 180.0 0.0 true true 0 ( 75)]
] -60.0 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
3492 540 M
0 3600 V
1.000 UL
LTb
3492 540 M
0 63 V
0 3537 R
0 -63 V
stroke
3492 360 M
gsave 0 setgray
[ [(Helvetica) 180.0 0.0 true true 0 ( 100)]
] -60.0 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
4163 540 M
0 3600 V
1.000 UL
LTb
4163 540 M
0 63 V
0 3537 R
0 -63 V
stroke
4163 360 M
gsave 0 setgray
[ [(Helvetica) 180.0 0.0 true true 0 ( 125)]
] -60.0 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
4833 540 M
0 3177 V
0 360 R
0 63 V
1.000 UL
LTb
4833 540 M
0 63 V
0 3537 R
0 -63 V
stroke
4833 360 M
gsave 0 setgray
[ [(Helvetica) 180.0 0.0 true true 0 ( 150)]
] -60.0 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
5504 540 M
0 3177 V
0 360 R
0 63 V
1.000 UL
LTb
5504 540 M
0 63 V
0 3537 R
0 -63 V
stroke
5504 360 M
gsave 0 setgray
[ [(Helvetica) 180.0 0.0 true true 0 ( 175)]
] -60.0 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
6174 540 M
0 3600 V
1.000 UL
LTb
6174 540 M
0 63 V
0 3537 R
0 -63 V
stroke
6174 360 M
gsave 0 setgray
[ [(Helvetica) 180.0 0.0 true true 0 ( 200)]
] -60.0 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTb
810 540 M
5364 0 V
0 3600 V
-5364 0 V
810 540 L
LTb
180 2340 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 180.0 0.0 true true 0 (USB Gain \(dB\))]
] -60.0 MCshow
grestore
grestore
LTb
3492 90 M
gsave 0 setgray
[ [(Helvetica) 180.0 0.0 true true 0 (IF Frequency \(GHz\))]
] -60.0 MCshow
grestore
LTb
3492 4770 M
gsave 0 setgray
[ [(Helvetica) 180.0 0.0 true true 0 (SSB gain vs IF frequency for a realistic SIS mixer)]
] -60.0 MCshow
grestore
3492 4590 M
gsave 0 setgray
[ [(Helvetica) 180.0 0.0 true true 0 (RF and IF embedding impedances are kept constant, real IV data is used)]
] -60.0 MCshow
grestore
1.000 UP
1.000 UL
LT0
LTb
5355 3987 M
gsave 0 setgray
[ [(Helvetica) 180.0 0.0 true true 0 (MultiTone)]
] -60.0 MRshow
grestore
LT0
5463 3987 M
495 0 V
828 3508 M
18 -2 V
19 -1 V
18 1 V
18 4 V
18 3 V
19 1 V
18 4 V
18 5 V
18 3 V
19 1 V
18 -6 V
18 -17 V
18 -17 V
19 -15 V
18 -14 V
18 -12 V
18 -11 V
19 -11 V
18 -9 V
18 -9 V
18 -9 V
18 -8 V
19 -7 V
18 -7 V
18 -7 V
18 -8 V
19 -12 V
18 -11 V
18 -10 V
18 -11 V
19 -18 V
18 -17 V
18 -15 V
18 -15 V
19 -14 V
18 -14 V
18 -13 V
18 -12 V
19 -12 V
18 -11 V
18 -10 V
18 -11 V
18 -10 V
19 -9 V
18 -9 V
18 -9 V
18 -9 V
19 -9 V
18 -8 V
18 -13 V
18 -13 V
19 -13 V
18 -17 V
18 -18 V
18 -17 V
19 -14 V
18 -13 V
18 -13 V
18 -16 V
18 -16 V
19 -15 V
18 -15 V
18 -13 V
18 -13 V
19 -13 V
18 -13 V
18 -12 V
18 -20 V
19 -23 V
18 -22 V
18 -22 V
18 -20 V
19 -19 V
18 -19 V
18 -17 V
18 -17 V
19 -21 V
18 -26 V
18 -25 V
18 -26 V
18 -27 V
19 -26 V
18 -26 V
18 -28 V
18 -27 V
19 -28 V
18 -35 V
18 -33 V
18 -31 V
19 -27 V
18 -26 V
18 -26 V
18 -32 V
19 -30 V
18 -31 V
18 -32 V
18 -32 V
19 -31 V
18 -27 V
18 -26 V
18 -27 V
18 -27 V
stroke
2688 1922 M
19 -28 V
18 -27 V
18 -18 V
18 -18 V
19 -19 V
18 -12 V
18 -12 V
18 -12 V
19 -13 V
18 -14 V
18 -14 V
18 -12 V
19 -11 V
18 -12 V
18 -7 V
18 -4 V
19 -5 V
18 -3 V
18 -1 V
18 -2 V
18 -3 V
19 -2 V
18 -2 V
18 -3 V
18 -3 V
19 -3 V
18 -2 V
18 0 V
18 0 V
19 1 V
18 1 V
18 1 V
18 1 V
19 3 V
18 2 V
18 1 V
18 1 V
19 1 V
18 0 V
18 3 V
18 2 V
18 2 V
19 2 V
18 3 V
18 2 V
18 2 V
19 2 V
18 2 V
18 2 V
18 2 V
19 2 V
18 2 V
18 2 V
18 1 V
19 3 V
18 2 V
18 3 V
18 3 V
18 3 V
19 2 V
18 4 V
3819 563 L
18 1166 V
19 3 V
18 3 V
18 2 V
18 4 V
19 3 V
18 4 V
18 3 V
18 3 V
19 3 V
18 3 V
18 3 V
18 3 V
19 4 V
18 3 V
18 4 V
18 3 V
18 3 V
19 4 V
18 3 V
18 3 V
18 4 V
19 4 V
18 3 V
18 3 V
18 3 V
19 4 V
18 4 V
18 4 V
18 4 V
19 4 V
18 4 V
18 4 V
18 5 V
19 4 V
18 4 V
18 5 V
18 4 V
18 4 V
19 4 V
18 4 V
18 5 V
stroke
4585 1877 M
18 5 V
19 4 V
18 5 V
18 6 V
18 5 V
19 6 V
18 6 V
18 5 V
18 6 V
19 5 V
18 5 V
18 6 V
18 5 V
19 6 V
18 6 V
18 8 V
18 8 V
18 8 V
19 7 V
18 8 V
18 8 V
18 6 V
19 7 V
18 8 V
18 5 V
18 6 V
19 7 V
18 2 V
18 2 V
18 2 V
19 0 V
18 1 V
18 0 V
18 -2 V
18 -2 V
19 -3 V
18 -6 V
18 -8 V
18 -9 V
19 -8 V
18 -8 V
18 -9 V
18 -10 V
19 -11 V
18 -12 V
18 -11 V
18 -9 V
19 -9 V
18 -9 V
18 -7 V
18 -8 V
19 -10 V
18 -10 V
18 -11 V
18 -11 V
18 -8 V
19 -9 V
18 -8 V
18 -5 V
18 -6 V
19 -7 V
18 -7 V
18 -7 V
18 -8 V
19 -6 V
18 -6 V
18 -6 V
18 -7 V
19 -7 V
18 -8 V
18 -6 V
18 -7 V
19 -7 V
18 -4 V
18 -3 V
18 -4 V
18 -4 V
19 -3 V
18 -4 V
18 -4 V
18 -4 V
19 -4 V
18 -4 V
18 -5 V
18 -5 V
19 -5 V
18 -5 V
2 -1 V
1.000 UL
LT1
LTb
5355 3807 M
gsave 0 setgray
[ [(Helvetica) 180.0 0.0 true true 0 (SuperMix)]
] -60.0 MRshow
grestore
LT1
5463 3807 M
495 0 V
810 3858 M
58 -315 V
59 -7 V
58 -10 V
58 -12 V
59 -15 V
58 -17 V
59 -20 V
58 -21 V
58 -24 V
59 -26 V
58 -28 V
58 -31 V
59 -32 V
58 -35 V
58 -37 V
59 -39 V
58 -42 V
58 -44 V
59 -46 V
58 -50 V
59 -54 V
58 -58 V
58 -65 V
59 -74 V
58 -95 V
58 -96 V
59 -87 V
58 -95 V
58 -99 V
59 -92 V
58 -100 V
59 -86 V
58 -76 V
58 -58 V
59 -33 V
58 -30 V
58 -17 V
59 -5 V
58 0 V
58 3 V
59 4 V
58 5 V
58 5 V
59 7 V
58 7 V
59 7 V
58 8 V
58 8 V
59 9 V
58 9 V
58 10 V
59 10 V
58 10 V
58 11 V
59 12 V
58 11 V
59 12 V
58 13 V
58 13 V
59 14 V
58 15 V
58 15 V
59 17 V
58 18 V
58 21 V
59 23 V
58 27 V
59 26 V
58 29 V
58 36 V
59 30 V
58 26 V
58 15 V
59 0 V
58 -6 V
58 -25 V
59 -28 V
58 -34 V
58 -47 V
59 -42 V
58 -37 V
59 -33 V
58 -29 V
58 -27 V
59 -25 V
58 -23 V
58 -21 V
59 -21 V
58 -19 V
58 -18 V
59 -17 V
53 -15 V
1.000 UL
LTb
810 540 M
5364 0 V
0 3600 V
-5364 0 V
810 540 L
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
%%Pages: 1
