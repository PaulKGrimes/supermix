2,3c2,3
< ** confparse.inc - file included in realistic.c, containing code to parse the **
< **              conf files, setting the globals created in globals.inc        **
---
> ** globals.inc - file included in simple.c, containing code to parse the conf **
> **              files, setting the globals created in globals.inc             **
6c6
< ** Date   - 01/09/03     - created from SuperMix_Simple version               **
---
> ** Date   - 18/07/03                                                          **
33,52d32
< static DOTCONF_CB(lo_temp);
< 
< // RF loss parameters
< //  Beamsplitter
< static DOTCONF_CB(bs_epsilon);
< static DOTCONF_CB(bs_loss_tan);
< static DOTCONF_CB(bs_thickness);
< static DOTCONF_CB(bs_angle);
< static DOTCONF_CB(bs_temp);
< //  Dewar Window
< static DOTCONF_CB(dw_epsilon);
< static DOTCONF_CB(dw_loss_tan);
< static DOTCONF_CB(dw_thickness);
< static DOTCONF_CB(dw_angle);
< static DOTCONF_CB(dw_temp);
< //  Misc RF losses
< static DOTCONF_CB(misc_atten);
< static DOTCONF_CB(misc_temp);
< // Lossy Microstrip
< static DOTCONF_CB(lossy_input);
58c38
< static DOTCONF_CB(if_freq);
---
> static DOTCONF_CB(if_freq); 
71c51
< 
---
>     
76c56
< 
---
>     
105a86,94
> static DOTCONF_CB(filter_choke_sections);
> static DOTCONF_CB(filter_choke_input);
> static DOTCONF_CB(filter_choke_narrow);
> static DOTCONF_CB(filter_choke_wide);
> 
>     //IF Circuit
> static DOTCONF_CB(if_finline_s2p);
> static DOTCONF_CB(if_connect_s2p);
> static DOTCONF_CB(if_finline_out);
121c110
< 
---
>     
136,154d124
<     {"LO_TEMP",             ARG_LIST,   lo_temp,            NULL,   CTX_ALL },
<     // RF Loss parameters
<     //  Beamsplitter
<     {"BS_EPSILON",          ARG_LIST,   bs_epsilon,         NULL,   CTX_ALL },
<     {"BS_LOSS_TAN",         ARG_LIST,   bs_loss_tan,        NULL,   CTX_ALL },
<     {"BS_THICKNESS",        ARG_LIST,   bs_thickness,       NULL,   CTX_ALL },
<     {"BS_ANGLE",            ARG_LIST,   bs_angle,           NULL,   CTX_ALL },
<     {"BS_TEMP",             ARG_LIST,   bs_temp,            NULL,   CTX_ALL },
<     //  Dewar Window
<     {"DW_EPSILON",          ARG_LIST,   dw_epsilon,         NULL,   CTX_ALL },
<     {"DW_LOSS_TAN",         ARG_LIST,   dw_loss_tan,        NULL,   CTX_ALL },
<     {"DW_THICKNESS",        ARG_LIST,   dw_thickness,       NULL,   CTX_ALL },
<     {"DW_ANGLE",            ARG_LIST,   dw_angle,           NULL,   CTX_ALL },
<     {"DW_TEMP",             ARG_LIST,   dw_temp,            NULL,   CTX_ALL },
<     //  Misc RF Losses
<     {"MISC_ATTENUATION",    ARG_LIST,   misc_atten,         NULL,   CTX_ALL },
<     {"MISC_TEMP",           ARG_LIST,   misc_temp,          NULL,   CTX_ALL },
<     //  Lossy Input Microstrip
<     {"LOSSY_INPUT",         ARG_LIST,   lossy_input,        NULL,   CTX_ALL },
195c165
<     {"BELITSKY_TUNING_STRIP", ARG_LIST,  belitsky_tuning_strip, NULL,   CTX_ALL },
---
>     {"BELITSKY_TUNING_STRIP", ARG_LIST,  belitsky_tuning_strip, NULL,   CTX_ALL }, 
197,198c167
< 
<     {"RF_CHOKE_TYPE",        ARG_STR,    rf_choke_type,       NULL,   CTX_ALL },
---
>     {"RF_CHOKE_TYPE",        ARG_STR,    rf_choke_type,       NULL,   CTX_ALL },    
202a172,181
>     {"FILTER_CHOKE_SECTIONS",ARG_LIST,   filter_choke_sections,NULL,  CTX_ALL },
>     {"FILTER_CHOKE_INPUT",   ARG_LIST,   filter_choke_input , NULL,   CTX_ALL },
>     {"FILTER_CHOKE_NARROW",  ARG_LIST,   filter_choke_narrow, NULL,   CTX_ALL },
>     {"FILTER_CHOKE_WIDE",    ARG_LIST,   filter_choke_wide  , NULL,   CTX_ALL },
>         // IF Circuits
>     {"IF_FINLINE_S2P",            ARG_STR,    if_finline_s2p,           NULL,   CTX_ALL },
>     {"IF_CONNECT_S2P",            ARG_STR,    if_connect_s2p,           NULL,   CTX_ALL },
>     {"IF_FINLINE_OUT",    ARG_LIST,   if_finline_out  , NULL,   CTX_ALL },
>     
>     
260c239
< 
---
>     
266c245
< 
---
>     
274c253
< 
---
>     
282c261
< 
---
>     
290c269
< 
---
>     
297c276
< 
---
>     
300c279
< 
---
>     
302c281
< 
---
>     
309c288
< 
---
>     
312c291
< 
---
>     
314c293
< 
---
>     
321c300
< 
---
>     
324,429d302
< 
<     LO_POWER = atof(cmd->data.list[0])*LO_POWER_unit;
< 
<     return NULL;
< }
< 
< DOTCONF_CB(lo_temp)
< {
<     Lo_Temp = atof(cmd->data.list[0])*Kelvin;
< 
<     return NULL;
< }
< 
< // RF Loss parameters
< //  Beamsplitter
< DOTCONF_CB(bs_epsilon)
< {
<     BS_EPSILON = atof(cmd->data.list[0]);
< 
<     return NULL;
< }
< 
< DOTCONF_CB(bs_loss_tan)
< {
<     BS_LOSS_TAN = atof(cmd->data.list[0]);
< 
<     return NULL;
< }
< 
< DOTCONF_CB(bs_thickness)
< {
<     BS_THICKNESS = atof(cmd->data.list[0])*Micron;
< 
<     return NULL;
< }
< 
< DOTCONF_CB(bs_angle)
< {
<     BS_ANGLE = atof(cmd->data.list[0])*Degree;
< 
<     return NULL;
< }
< 
< DOTCONF_CB(bs_temp)
< {
<     BS_TEMP = atof(cmd->data.list[0])*Kelvin;
< 
<     return NULL;
< }
< 
< //  Dewar Window
< DOTCONF_CB(dw_epsilon)
< {
<     DW_EPSILON = atof(cmd->data.list[0]);
< 
<     return NULL;
< }
< 
< DOTCONF_CB(dw_loss_tan)
< {
<     DW_LOSS_TAN = atof(cmd->data.list[0]);
< 
<     return NULL;
< }
< 
< DOTCONF_CB(dw_thickness)
< {
<     DW_THICKNESS = atof(cmd->data.list[0])*Micron;
< 
<     return NULL;
< }
< 
< DOTCONF_CB(dw_angle)
< {
<     DW_ANGLE = atof(cmd->data.list[0])*Degree;
< 
<     return NULL;
< }
< 
< DOTCONF_CB(dw_temp)
< {
<     DW_TEMP = atof(cmd->data.list[0])*Kelvin;
< 
<     return NULL;
< }
< 
< //  Misc RF Losses
< DOTCONF_CB(misc_atten)
< {
<     MISC_ATTEN = atof(cmd->data.list[0]);
< 
<     return NULL;
< }
< 
< DOTCONF_CB(misc_temp)
< {
<     MISC_TEMP = atof(cmd->data.list[0])*Kelvin;
< 
<     return NULL;
< }
< 
< DOTCONF_CB(lossy_input)
< {
<     LOSSY_INPUT_length_unit = Micron;
<     LOSSY_INPUT_length_unitStr = "um";
<     LOSSY_INPUT_length = atof(cmd->data.list[0])*LOSSY_INPUT_length_unit;
431,433c304
<     LOSSY_INPUT_width_unit = Micron;
<     LOSSY_INPUT_width_unitStr = "um";
<     LOSSY_INPUT_width = atof(cmd->data.list[1])*LOSSY_INPUT_width_unit;
---
>     LO_POWER = atof(cmd->data.list[0])*LO_POWER_unit;
438,439d308
< 
< 
790a660,663
>     BELITSKY_INPUT_STRIP_thick_unit = Micron;
>     BELITSKY_INPUT_STRIP_thick_unitStr = "um";
>     BELITSKY_INPUT_STRIP_thick = atof(cmd->data.list[2])*BELITSKY_INPUT_STRIP_thick_unit;
> 
803a677,680
>     BELITSKY_TUNING_STRIP_thick_unit = Micron;
>     BELITSKY_TUNING_STRIP_thick_unitStr = "um";
>     BELITSKY_TUNING_STRIP_thick = atof(cmd->data.list[2])*BELITSKY_TUNING_STRIP_thick_unit;
> 
871a749,819
> DOTCONF_CB(filter_choke_sections)
> {
> 	FILTER_CHOKE_SECTIONS = atoi(cmd->data.list[0]);
> 	
> 	return NULL;
> }
> 
> DOTCONF_CB(filter_choke_input)
> {
> 	FILTER_CHOKE_INPUT_length_unit = Micron;
> 	FILTER_CHOKE_INPUT_width_unit = Micron;
> 	FILTER_CHOKE_INPUT_length_unitStr = "um";
> 	FILTER_CHOKE_INPUT_width_unitStr = "um";
> 	
> 	FILTER_CHOKE_INPUT_length = atof(cmd->data.list[0]) * Micron;
> 	FILTER_CHOKE_INPUT_width  = atof(cmd->data.list[1]) * Micron;
> 
> 	return NULL;
> }    
>     
> DOTCONF_CB(filter_choke_narrow)
> {
> 	FILTER_CHOKE_NARROW_length_unit = Micron;
> 	FILTER_CHOKE_NARROW_width_unit = Micron;
> 	FILTER_CHOKE_NARROW_length_unitStr = "um";
> 	FILTER_CHOKE_NARROW_width_unitStr = "um";
> 	
> 	FILTER_CHOKE_NARROW_length = atof(cmd->data.list[0]) * Micron;
> 	FILTER_CHOKE_NARROW_width  = atof(cmd->data.list[1]) * Micron;
> 
> 	return NULL;
> }
> 
> DOTCONF_CB(filter_choke_wide)
> {
> 	FILTER_CHOKE_WIDE_length_unit = Micron;
> 	FILTER_CHOKE_WIDE_width_unit = Micron;
> 	FILTER_CHOKE_WIDE_length_unitStr = "um";
> 	FILTER_CHOKE_WIDE_width_unitStr = "um";
> 	
> 	FILTER_CHOKE_WIDE_length = atof(cmd->data.list[0]) * Micron;
> 	FILTER_CHOKE_WIDE_width  = atof(cmd->data.list[1]) * Micron;
> 
> 	return NULL;
> }
> 
> // IF Circuit components
> DOTCONF_CB(if_finline_s2p)
> {
>     IF_FINLINE_S2P = cmd->data.str;
>     return NULL;
> }
> 
> DOTCONF_CB(if_connect_s2p)
> {
>     IF_CONNECT_S2P = cmd->data.str;
>     return NULL;
> }
> 
> DOTCONF_CB(if_finline_out)
> {
> 	IF_FINLINE_OUT_length_unit = Micron;
> 	IF_FINLINE_OUT_width_unit = Micron;
> 	IF_FINLINE_OUT_length_unitStr = "um";
> 	IF_FINLINE_OUT_width_unitStr = "um";
> 	
> 	IF_FINLINE_OUT_length = atof(cmd->data.list[0]) * Micron;
> 	IF_FINLINE_OUT_width  = atof(cmd->data.list[1]) * Micron;
> 
> 	return NULL;
> }
